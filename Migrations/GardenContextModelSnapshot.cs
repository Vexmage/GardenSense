// <auto-generated />
using System;
using GardenSense.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GardenSense.Migrations
{
    [DbContext(typeof(GardenContext))]
    partial class GardenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("GardenSense.Models.ActuatorStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FanOn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GardenZoneId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GrowLightsOn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HeaterOn")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GardenZoneId");

                    b.ToTable("ActuatorStatuses");
                });

            modelBuilder.Entity("GardenSense.Models.GardenZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("GardenSense.Models.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GardenZoneId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<double>("LightLevel")
                        .HasColumnType("REAL");

                    b.Property<double>("SoilMoisture")
                        .HasColumnType("REAL");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GardenZoneId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("GardenSense.Models.ActuatorStatus", b =>
                {
                    b.HasOne("GardenSense.Models.GardenZone", "Zone")
                        .WithMany("ActuatorStatuses")
                        .HasForeignKey("GardenZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GardenSense.Models.SensorReading", b =>
                {
                    b.HasOne("GardenSense.Models.GardenZone", "Zone")
                        .WithMany("SensorReadings")
                        .HasForeignKey("GardenZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GardenSense.Models.GardenZone", b =>
                {
                    b.Navigation("ActuatorStatuses");

                    b.Navigation("SensorReadings");
                });
#pragma warning restore 612, 618
        }
    }
}
